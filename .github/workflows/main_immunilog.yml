name: Immunilog Pipeline

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  backend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Cache .NET NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SonarQube Scanner for MSBuild
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"atjulia_immunilog" \
            /o:"atjulia" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="backend/Immunilog.UI/mstests/TestResults/*.xml" \
            /d:sonar.exclusions="frontend/**/*" \
            /d:sonar.inclusions="**/*.cs,**/*.cshtml"

            dotnet build -c Release

            dotnet test backend/Immunilog.UI/Immunilog.UI.csproj \
              --no-build --logger:trx --results-directory ./backend/Immunilog.UI/mstests/TestResults \
              /p:CollectCoverage=true \
              /p:CoverletOutputFormat=opencover \
              /p:CoverletOutput=./backend/Immunilog.UI/mstests/TestResults/coverage.opencover.xml

            dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Publish backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: ./backend-publish

  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Node.js dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install Frontend Dependencies
        run: npm install --prefix frontend/

      - name: Build Frontend
        run: npm run build --prefix frontend/

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: frontend/dist

  deploy:
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend
          path: ./backend-publish

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend
          path: ./frontend-build

      - name: Set up .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Deploy Backend to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'immunilog-back'
          slot-name: 'Production'
          package: ./backend-publish
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_BACKEND }}

      - name: Deploy Frontend to Azure Web App
        id: deploy-frontend
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'immunilog-front'
          slot-name: 'Production'
          package: ./frontend-build
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_FRONTEND }}
